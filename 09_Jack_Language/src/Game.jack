class Game {

    field Array positions;
    field int current_position;
    field boolean start;
    field boolean quit;
    field boolean reset;

    constructor Game new() {        
        // Initializes game and sets the board      

        do initialize_position();
        do show_welcome_message();
        return this;
    }

    method void dispose() {
        // Dispose of (deallocate) objects

        do Memory.deAlloc(this);
        return;
    }

    method int handle_input() {
        // Starts, restarts, or terminates a game at any time
        
        var int key;
        let key = Keyboard.keyPressed();

        if (key = 81) { // Q
            let quit = true;
        }
        if (key = 82) { // R
            let reset = true;
        }
        if (key = 83) { // S
            let start = true;
        }
        return key;
    }

    method int handle_selector() {
        var int key;
        let key = Keyboard.keyPressed();

        if (key = 130) { // Left-arrow
            let current_position = current_position - 1;
            if (current_position < 0) {
                let current_position = 0;
            }
        }
        if (key = 132) { // Right-arrow
            let current_position = current_position + 1;
            if (current_position > 31) {
                let current_position = 31;
            }
        }
        return key;
    }
    
    method void play() {
        
        var int last_key;
        var int current_key;
        var boolean dead;
        let dead = false;

        let last_key = 0;
        let current_key = 1;
        let quit = false;
        let reset = false;
        let start = false;
        let current_position = 0;

        while (~quit) {            
            

            // Avoid the issue of the current position incrementing by more
            // than one when the arrow keys are held down.
            let current_key = handle_input();
            if (~(current_key=last_key)){
                do handle_selector();
            }

          
            do Graphics.draw_cell_selector(positions[current_position]);

            do Output.moveCursor(20, 0);
            do Output.printInt(positions[current_position]);

            if (start){
                do start_game();
                let start = false;
            }

            if (reset){
                let reset = false;
            }

            let last_key = current_key;
        }

        return;
    }

    method void start_game(){
        do Screen.clearScreen();
        do Graphics.draw_board();
        do show_instructions();
        return;
    }


    method void show_welcome_message() {
        // Prints the welcome message onto the screen
        do Output.printString("Welcome to MineSweeper: 'Boom or Bust Edition!'");
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.printString("Brace yourself for a pixelated adventure where you'll navigate atreacherous minefield without losing any limbs.");
        do Output.println();
        do Output.println();
        do Output.printString("Click wrong, and boom! It's a game of wits, luck, and occasionalexplosions.");
        do Output.println();
        do Output.println();
        do Output.printString("Are you ready to outsmart the mines and claim victory?");
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.printString("Press S to START");
        do Output.println();
        do Output.printString("Press Q ANYTIME to EXIT");
        do Output.println();
        do Output.printString("Press R to RESTART");
        return;
    }

    method void show_instructions() {
        // Shows instructions at bottom of the page
        do Output.moveCursor(21, 0);
        do Output.printString("Use LEFT & RIGHT-ARROWS to move spot selector.");
        do Output.println();
        do Output.printString("Then PRESS ENTER to click.");
        return;
    }

    method void initialize_position() {
            
        let positions = Array.new(32);
        let positions[0] = 0;
        let positions[1] = 4;
        let positions[2] = 8;
        let positions[3] = 12;
        let positions[4] = 16;
        let positions[5] = 20;
        let positions[6] = 24;
        let positions[7] = 28;
        let positions[8] = 1600;
        let positions[9] = 1604;
        let positions[10] = 1608;
        let positions[11] = 1612;
        let positions[12] = 1616;
        let positions[13] = 1620;
        let positions[14] = 1624;
        let positions[15] = 1628;
        let positions[16] = 3200;
        let positions[17] = 3204;
        let positions[18] = 3208;
        let positions[19] = 3212;
        let positions[20] = 3216;
        let positions[21] = 3220;
        let positions[22] = 3224;
        let positions[23] = 3228;
        let positions[24] = 4800;
        let positions[25] = 4804;
        let positions[26] = 4808;
        let positions[27] = 4812;
        let positions[28] = 4816;
        let positions[29] = 4820;
        let positions[30] = 4824;
        let positions[31] = 4828;
        return;
    }





}